@page "/"
@using Susmeter.Abstractions.Models
@using Susmeter.Abstractions.Infrastructure
@using Susmeter.DataAccess.DataStores
@inject IStatsDataStore _statsStore

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-4 col-md-12">
            <div class="card text-white bg-primary">
                <div class="card-body">
                    <h1 class="display-1 d-inline">
                        <i class="fas fa-gamepad" style="color: rgba(255, 255, 255, 0.2)"></i>
                        @totals.MatchesPlayed
                    </h1>
                    <h5 class="card-title d-inline">matches played</h5>
                </div>
            </div>
        </div>

        <div class="col-lg-4 col-md-12">
            <div class="card text-white bg-danger">
                <div class="card-body">
                    <h1 class="display-1 d-inline">
                        <i class="fas @Role.Impostor.IconClass()" style="color: rgba(255, 255, 255, 0.2)"></i>
                        @totals.ImpostorWins
                    </h1>
                    <h5 class="card-title d-inline">impostor wins</h5>
                    <h3 class="card-title d-inline float-right" style="color: rgba(255, 255, 255, 0.5)">@((((decimal)totals.ImpostorWins / totals.MatchesPlayed) * 100).ToString("0.00"))%</h3>
                </div>
            </div>
        </div>

        <div class="col-lg-4 col-md-12">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h1 class="display-1 d-inline">
                        <i class="fas @Role.Crewmate.IconClass()" style="color: rgba(255, 255, 255, 0.2)"></i>
                        @totals.CrewmateWins
                    </h1>
                    <h5 class="card-title d-inline">crewmate wins</h5>
                    <h3 class="card-title d-inline float-right" style="color: rgba(255, 255, 255, 0.5)">@((((decimal)totals.CrewmateWins / totals.MatchesPlayed) * 100).ToString("0.00"))%</h3>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-lg-4 col-md-12">
            <div class="card text-white bg-warning">
                <div class="card-body">
                    <span style="float: right;">
                        <span class="badge @(topImpostorsFilter.Period == Period.Weekly ? "badge-light" : "badge-warning")" @onclick="(() => LoadTopImpostors(Period.Weekly, topImpostorsFilter.Page))">Weekly</span>
                        <span class="badge @(topImpostorsFilter.Period == Period.Monthly ? "badge-light" : "badge-warning")" @onclick="(() => LoadTopImpostors(Period.Monthly, topImpostorsFilter.Page))">Monthly</span>
                        <span class="badge @(topImpostorsFilter.Period == Period.AllTime ? "badge-light" : "badge-warning")" @onclick="(() => LoadTopImpostors(Period.AllTime, topImpostorsFilter.Page))">All time</span>
                    </span>
                    <h5 class="card-title"><i class="fas fa-poo mr-2"></i>Shit list</h5>
                    <ul class="list-group text-white list-group-flush">
                        @if (!topImpostors.Any())
                        {
                            <small class="font-italic">Add matches to show statistics...</small>
                        }

                        @foreach (var impostor in topImpostors)
                        {
                            <li class="list-group-item border-light bg-warning font-weight-bold">
                                <span>@impostor.Nickname</span><span class="float-right">@impostor.ImpostorGames</span>
                            </li>
                        }
                    </ul>
                    <ul class="list-group text-white text-right list-group-flush">
                        <small @onclick="(() => LoadTopImpostors(topImpostorsFilter.Period, topImpostorsFilter.Page + 1))" class="font-italic mt-1 float-right">Show more</small>
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-lg-4 col-md-12">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <span style="float: right;">
                        <span class="badge @(deadliestImpostorsFilter.Period == Period.Weekly ? "badge-light" : "badge-danger")" @onclick="(() => LoadDeadliestImpostors(Period.Weekly, deadliestImpostorsFilter.Page))">Weekly</span>
                        <span class="badge @(deadliestImpostorsFilter.Period == Period.Monthly ? "badge-light" : "badge-danger")" @onclick="(() => LoadDeadliestImpostors(Period.Monthly, deadliestImpostorsFilter.Page))">Monthly</span>
                        <span class="badge @(deadliestImpostorsFilter.Period == Period.AllTime ? "badge-light" : "badge-danger")" @onclick="(() => LoadDeadliestImpostors(Period.AllTime, deadliestImpostorsFilter.Page))">All time</span>
                    </span>
                    <h5 class="card-title"><i class="fas fa-book-dead mr-2"></i>Deadliest impostors</h5>
                    <ul class="list-group text-white list-group-flush">
                        @if (!deadliestImpostors.Any())
                        {
                            <small class="font-italic">Add matches to show statistics...</small>
                        }

                        @foreach (var impostor in deadliestImpostors)
                        {
                            <li class="list-group-item border-light bg-danger font-weight-bold">
                                <span>@impostor.Nickname</span><span class="float-right">@impostor.WinPercent.ToString("0.00")%</span>
                            </li>
                        }
                    </ul>
                    <ul class="list-group text-white text-right list-group-flush">
                        <small @onclick="(() => LoadDeadliestImpostors(deadliestImpostorsFilter.Period, deadliestImpostorsFilter.Page + 1))" class="font-italic mt-1 float-right">Show more</small>
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-lg-4 col-md-12">
            <div class="card text-white bg-info">
                <div class="card-body">
                    <span style="float: right;">
                        <span class="badge @(fiveHeadCrewmatesFilter.Period == Period.Weekly ? "badge-light" : "badge-info")" @onclick="(() => LoadFiveHeadCrewmates(Period.Weekly, fiveHeadCrewmatesFilter.Page))">Weekly</span>
                        <span class="badge @(fiveHeadCrewmatesFilter.Period == Period.Monthly ? "badge-light" : "badge-info")" @onclick="(() => LoadFiveHeadCrewmates(Period.Monthly, fiveHeadCrewmatesFilter.Page))">Monthly</span>
                        <span class="badge @(fiveHeadCrewmatesFilter.Period == Period.AllTime ? "badge-light" : "badge-info")" @onclick="(() => LoadFiveHeadCrewmates(Period.AllTime, fiveHeadCrewmatesFilter.Page))">All time</span>
                    </span>
                    <h5 class="card-title"><i class="fas fa-brain mr-2"></i>5head crewmates</h5>
                    <ul class="list-group text-white list-group-flush">
                        @if (!fiveHeadCrewmates.Any())
                        {
                            <small class="font-italic">Add matches to show statistics...</small>
                        }

                        @foreach (var crewmate in fiveHeadCrewmates)
                        {
                            <li class="list-group-item border-light bg-info font-weight-bold">
                                <span>@crewmate.Nickname</span><span class="float-right">@crewmate.WinPercent.ToString("0.00")%</span>
                            </li>
                        }
                    </ul>
                    <ul class="list-group text-white text-right list-group-flush">
                        <small @onclick="(() => LoadFiveHeadCrewmates(fiveHeadCrewmatesFilter.Period, fiveHeadCrewmatesFilter.Page + 1))" class="font-italic mt-1 float-right">Show more</small>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-lg-4 col-md-12">
            <div class="card bg-secondary text-white">
                <div class="card-body">
                    <span style="float: right;">
                        <span class="badge @(worstImpostorsFilter.Period == Period.Weekly ? "badge-light" : "badge-secondary")" @onclick="(() => LoadWorstImpostors(Period.Weekly, worstImpostorsFilter.Page))">Weekly</span>
                        <span class="badge @(worstImpostorsFilter.Period == Period.Monthly ? "badge-light" : "badge-secondary")" @onclick="(() => LoadWorstImpostors(Period.Monthly, worstImpostorsFilter.Page))">Monthly</span>
                        <span class="badge @(worstImpostorsFilter.Period == Period.AllTime ? "badge-light" : "badge-secondary")" @onclick="(() => LoadWorstImpostors(Period.AllTime, worstImpostorsFilter.Page))">All time</span>
                    </span>
                    <h5 class="card-title"><i class="fas fa-blind mr-2"></i>Impostor shame list</h5>
                    <ul class="list-group text-white list-group-flush">
                        @if (!worstImpostors.Any())
                        {
                            <small class="font-italic">Add matches to show statistics...</small>
                        }

                        @foreach (var impostor in worstImpostors)
                        {
                            <li class="list-group-item border-dark bg-secondary font-weight-bold">
                                <span>@impostor.Nickname</span><span class="float-right">@impostor.WinPercent.ToString("0.00")%</span>
                            </li>
                        }
                    </ul>
                    <ul class="list-group text-white text-right list-group-flush">
                        <small @onclick="(() => LoadWorstImpostors(worstImpostorsFilter.Period, worstImpostorsFilter.Page + 1))" class="font-italic mt-1 float-right">Show more</small>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code 
{ 
    private MatchStatTotals totals = new MatchStatTotals();
    private List<TopImpostor> topImpostors = new List<TopImpostor>();
    private List<RoleStats> deadliestImpostors = new List<RoleStats>();
    private List<RoleStats> fiveHeadCrewmates = new List<RoleStats>();
    private List<RoleStats> worstImpostors = new List<RoleStats>();

    private Filter topImpostorsFilter = new Filter(Period.Monthly);
    private Filter deadliestImpostorsFilter = new Filter(Period.Monthly);
    private Filter fiveHeadCrewmatesFilter = new Filter(Period.Monthly);
    private Filter worstImpostorsFilter = new Filter(Period.Monthly);

    protected override async Task OnInitializedAsync()
    {
        totals = await _statsStore.MatchStatTotalsAsync();
        await LoadTopImpostors(Period.Monthly, 1);
        await LoadDeadliestImpostors(Period.Monthly, 1);
        await LoadFiveHeadCrewmates(Period.Monthly, 1);
        await LoadWorstImpostors(Period.Monthly, 1);
    }

    private async Task LoadTopImpostors(Period period, int page)
    {
        topImpostorsFilter.Period = period;
        topImpostorsFilter.Page = page;
        topImpostors = await _statsStore.ListTopImpostorsAsync(topImpostorsFilter);
    }

    private async Task LoadDeadliestImpostors(Period period, int page)
    {
        deadliestImpostorsFilter.Period = period;
        deadliestImpostorsFilter.Page = page;
        deadliestImpostors = await _statsStore.ListDeadliestImpostorAsync(deadliestImpostorsFilter);
    }

    private async Task LoadFiveHeadCrewmates(Period period, int page)
    {
        fiveHeadCrewmatesFilter.Period = period;
        fiveHeadCrewmatesFilter.Page = page;
        fiveHeadCrewmates = await _statsStore.List5HeadCrewmatesAsync(fiveHeadCrewmatesFilter);
    }

    private async Task LoadWorstImpostors(Period period, int page)
    {
        worstImpostorsFilter.Period = period;
        worstImpostorsFilter.Page = page;
        worstImpostors = await _statsStore.ListWorstImpostorAsync(worstImpostorsFilter);
    }
}